/* -*- Mode: C; -*- */
//--------------------------------------
//--- 010 Editor v6.0.3 Binary Template
//
// File:        sfx_struct.bt
// Author:      ufdada
// Revision:    1.0
// Purpose:     Sound fx
//--------------------------------------

/* 
this part correcty parse structure, but data sometimes not correct
if you expand all tree and appy template again - it`s show all correct,
but another way - not always correct
*/
local int i, j;
local int k, n, l;
local int a, b, c;
local int eCount;

typedef struct {
    uint index;
    ubyte unknows2[4];
} Data <read=ReadData, bgcolor=0x8CE6FF>; // , size=16>;

string ReadData( Data &data ) {
    string s;
    SPrintf(s, "data index: %d", data.index);
    return s;
}

typedef struct {
    uint index;
    uint unknown_1;
    uint unknown_2;
    uint edi_2; // if (edi_2) { need some magic; }
} EEEEntry <read=ReadEEEEntry, bgcolor=0xFF8CE6>; // , size=16>;

string ReadEEEEntry( EEEEntry &entry ) {
    string s;
    SPrintf(s, "eee index: %d", entry.index);
    return s;
}

typedef struct {  
    uint entryCount; // EEEEntry count
    uint dataCount; // Data count
    uint end_pointer_position; // I think not needed
    ushort unknown_1[4];
    quad unknown_2;
    ushort unknown_3[4];
    ushort unknown_4;
    uint data_pointer_next; // I think not needed
    
    c = FTell(); // save position
    FSeek(l); // jump to EEEEntry position
    
    EEEEntry entry[entryCount] <optimize=false>;
    if (dataCount != 0) {
        Data data[dataCount] <optimize=false>;
    }
    
    n = FTell(); // save EEEntry position
    FSeek(c); // restore position

} EEEntry <size=42, bgcolor=0xFFB7BC>;

typedef struct {
    uint index;
    uint count; // EEEntry count
    uint unknown_1;
    uint unknown_2;
    uint unknown_3;
    
    b = FTell(); // save position
    FSeek(n); // jump to EEEntry position
    l = n + count * sizeof(EEEntry); // position of EEEEntry

    EEEntry entry[count] <optimize=false>;

    //n = l; // save next EEEntry position
    FSeek(b); // restore position

} EEntry <size=20, read=ReadEEntry, bgcolor=0xBCFFB7>;

string ReadEEntry( EEntry &entry ) {
    string s;
    SPrintf(s, "e index: %d", entry.index);
    return s;
}

typedef struct {
    uint count; // EEntry count
    uint unknown_1;
    ushort unknown_2;
    ushort unknown_3;
    float minDistance;
    float maxDistance;
    float scale;
    
    a = FTell(); // save position
    FSeek(k); // jump to SfxMapEEntry position
    
    EEntry entry[count] <optimize=false>;
    
    k = FTell(); // save current SfxMapEEntry position
    FSeek(a); // restore position

} Entry <size=24, bgcolor=0xBCB7FF>;

uint checkSums[4]<format=hex>;

if (checkSums[0] != 0xE9612C00 || checkSums[1] != 0x11D231D0 
    || checkSums[2] != 0xB00009B4 || checkSums[3] != 0x3F293C9) {
    Warning( "Sfx-File is not valid!" );
    Printf( "Sfx-File is not valid!\n" );
    return -1;
}

uint unknown_1;
uint unknown_2;
uint count;

eCount = 0;
k = FTell() + count * sizeof(Entry); // position of first EEntry
for(i = 0; i < count; i++ ) {
    eCount += ReadUInt(FTell() + i * sizeof(Entry));
}
n = k + eCount * sizeof(EEntry); // position of EEEntry

Entry entry[count] <optimize=false>;

/*
this part parse file correctly but structure - not

local int i, j, k, n;
local int hSize, eSize, eeSize;

typedef struct SfxMapEEEEntry { // 16 bytes
    uint quantity;
    ubyte unknown[8];
    uint edi_2; // if (edi_2) { need some magic; }
};

typedef struct SfxMapEEEntry { // 42 bytes
    uint quantity;
    uint shift; // if shift need some magic
    uint end_pointer_position; // I think not needed
    ubyte unknown[26];
    uint data_pointer_next; // I think not needed
    //SfxMapEntry entries[quantity];
};

typedef struct SfxMapEEntry { // 20 bytes
    uint unknown;
    uint quantity;
    ubyte unknowns[12];
    // SfxMapHeaderEntry entries[quantity];
};

typedef struct SfxMapEntry { // 24 bytes
    uint quantity;
    ubyte unknown[8];
    float minDistance <bgcolor=0xBCB7FF>;
    float maxDistance <bgcolor=0xBCC7FF>;
    float scale <bgcolor=0xBCD7FF>;
    //SfxMapHeaderEntryHeader entries[quantity];
};

typedef struct
{
    uint unknown1;
    ubyte unknows2[4];
} SfxMapData;

uint dword_674038;
uint dword_67403C;
uint dword_674040;
uint dword_674044;

uint unknown_1;
uint unknown_2;
uint quantity;

SfxMapEntry entries[quantity] <optimize=false>;

eSize = 0;
for(i = 0; i < quantity; i++ )
{
    eSize += entries[i].quantity;
}
SfxMapEEntry entriesE[eSize] <optimize=false>;

hSize = 0;
eeSize = 0;
for (i = 0; i < eSize; i++ )
{
    eeSize = entriesE[i].quantity;
    SfxMapEEEntry entriesEE[eeSize] <optimize=false>;

    for (k = hSize; k < hSize + eeSize; k++)
    {
        SfxMapEEEEntry entryEEE[entriesEE[k].quantity] <optimize=false>;
        
        if (entriesEE[k].shift > 0)
        {
            SfxMapData data[entriesEE[k].shift] <optimize=false>;
        }
    }
    hSize += eeSize;
}
*/
