/* -*- Mode: C; -*- */
//--------------------------------------
//--- 010 Editor v6.0.3 Binary Template
//
// File:        sfx_struct_2.bt
// Author:      ArchDemon
// Revision:    1.0
// Purpose:     Sound fx
//--------------------------------------
/*
this part parse file correctly but structure - not
*/
local int i, j, k, n;
local int hSize, eSize, eeSize;

typedef struct
{
    uint index;
    ushort unknows_1;
    ushort unknows_2;
} Data <read=ReadData, bgcolor=0x8CE6FF>; // , size=16>;

string ReadData( Data &data ) {
    string s;
    SPrintf(s, "data index: %d", data.index);
    return s;
}

typedef struct {
    uint index;
    uint unknown_1;
    uint unknown_2;
    uint archiveId;
} EEEEntry <read=ReadEEEEntry, bgcolor=0xFF8CE6>; // , size=16>;

string ReadEEEEntry( EEEEntry &entry ) {
    string s;
    SPrintf(s, "eee index: %d", entry.index);
    return s;
}

typedef struct {
    uint entryCount; // EEEEntry count
    uint dataCount; // Data count
    uint end_pointer_position; // I think not needed
    ushort unknown[13];
    uint data_pointer_next; // I think not needed
    // EEEEntry entry[entryCount];
    // Data data[dataCount];
} EEEntry <bgcolor=0xFFB7BC>; // , size=42>;

typedef struct {
    uint index;
    uint count; // EEEntry count
    uint unknown_1;
    uint unknown_2;
    uint unknown_3;
    // EEEntry entry[count];
} EEntry <read=ReadEEntry, bgcolor=0xBCFFB7>; // , size=20> 

string ReadEEntry( EEntry &entry ) {
    string s;
    SPrintf(s, "e index: %d", entry.index);
    return s;
}

typedef struct {
    uint count; // EEntry count
    uint unknown_1;
    ushort unknown_2;
    ushort unknown_3;
    float minDistance;
    float maxDistance;
    float scale;
    // EEntry entry[count];
} Entry <bgcolor=0xBCB7FF>; // , size=24>;

uint checkSums[4]<format=hex>;

if (checkSums[0] != 0xE9612C00 || checkSums[1] != 0x11D231D0 
    || checkSums[2] != 0xB00009B4 || checkSums[3] != 0x3F293C9) {
    Warning( "Sfx-File is not valid!" );
    Printf( "Sfx-File is not valid!\n" );
    return -1;
}

uint unknown_1;
uint unknown_2;
uint count;

Entry entry[count] <optimize=false>;

eSize = 0;
for(i = 0; i < count; i++ )
{
    eSize += entry[i].count;
}
EEntry entryE[eSize] <optimize=false>;

hSize = 0;
eeSize = 0;
for (i = 0; i < eSize; i++ )
{
    eeSize = entryE[i].count;
    EEEntry entryEE[eeSize] <optimize=false>;

    for (k = hSize; k < hSize + eeSize; k++)
    {
        EEEEntry entryEEE[entryEE[k].entryCount] <optimize=false>;
        
        if (entryEE[k].dataCount > 0)
        {
            Data data[entryEE[k].dataCount] <optimize=false>;
        }
    }
    hSize += eeSize;
}
