/* -*- Mode: C; -*- */
//--------------------------------------
//--- 010 Editor v6.0.3 Binary Template
//
// File:        kwd_struct.bt
// Author:      ufdada
// Revision:    1.0
// Purpose:     KWD File
//--------------------------------------
LittleEndian();
#include "timestamp.bt";
#include "../util_struc.bt";
#include "resource.bt";

#include "creatures_struct.bt";
#include "creature_spells_struct.bt";
#include "doors_struct.bt";
#include "effects_struct.bt";
#include "effect_elements_struct.bt";
#include "keeper_spells_struct.bt";
#include "level_struct.bt";
#include "map_struct.bt";
#include "objects_struct.bt";
#include "player_struct.bt";
#include "rooms_struct.bt";
#include "shots_struct.bt";
#include "terrains_struct.bt";
#include "things_struct.bt";
#include "traps_struct.bt";
#include "triggers_struct.bt";
#include "variables_struct.bt";

struct Header {
    MapType signature;
    uint byteSize; // bytes in real size => 4
    uint fileSize;
    if (FileSize() != fileSize) {
        return showError( "FileSize", fileSize, FileSize());
    }
    uint checkOne;
    uint headerEndOffSet;
    switch(signature) {
        case MAP:
            struct {
                uint width;
                uint height;
            } map;
            break;
        case LEVEL:
            struct {
                ushort itemCount;
                ushort height;
                ubyte unk153; // zero on self made maps
                ubyte unk41; // 48 on self made maps
                ubyte unk1[2]; // unused
                timeStamp created;
                timeStamp modified;
            } level;
            break;
        case TRIGGERS:
            struct {
                uint itemCount[2];
                uint unk13;
                timeStamp created;
                timeStamp modified;
            } trigger;
            break;
        default:
            struct {
                uint itemCount;
                uint unk2;
                timeStamp created;
                timeStamp modified;
            } general;
            break;
    }

    uint checkTwo;
    uint contentSize; // filesize without header
    if (FileSize() - FTell() != contentSize) {
        //return showError( "ContentSize", contentSize, FileSize() - FTell());
    }
} header;

// Check file
if (header.checkOne != header.signature + 1) {
    return showError("First", header.signature + 1, header.checkOne );
} else if (header.checkTwo != header.signature + 2 && header.checkTwo != header.signature + 3 ) {
    // we only use the first one in the message, because it's the most common one.
    return showError("Second", header.signature + 2, header.checkTwo );
}
if (header.signature == TRIGGERS) {
    local int count = header.trigger.itemCount[0] + header.trigger.itemCount[1];
} else if (header.signature != MAP && header.signature != LEVEL) {
    local int count = header.general.itemCount;
}

switch (header.signature) {
    case CREATURE_SPELLS:
        CreatureSpellData spells[count]<optimize=false>;
        break;
    case CREATURES:
        CreatureData creature[count]<optimize=false>;
        break;
    case DOORS:
        DoorData doors[count]<optimize=false>;
        break;
    case EFFECT_ELEMENTS:
        EffectElementData effectElement[count]<optimize=false, read=getEffectElementName>;
        break;
    case EFFECTS:
        EffectData effect[count]<optimize=false, read=getEffectName>;
        break;
    case KEEPER_SPELLS:
        KeeperSpellData keeperSpells[count]<optimize=false>;
        break;
    case LEVEL:
        LevelData level;
        break;
    case MAP:
        MapData map;
        break;
    case OBJECTS:
        ObjectData object[count]<optimize=false>;
        break;
    case PLAYERS:
        PlayerData player[count]<optimize=false>;
        break;
    case ROOMS:
        RoomData room[count]<optimize=false>;
        break;
    case SHOTS:
        ShotData shot[count]<optimize=false>;
        break;
    case TERRAIN:
        TerrainData terrain[count]<optimize=false>;
        break;
    case THINGS:
        ThingData thing[count]<optimize=false>;
        break;
    case TRAPS:
        TrapData trap[count]<optimize=false>;
        break;
    case TRIGGERS:
        TriggerData trigger[count]<optimize=false>;
        break;
    case VARIABLES:
        VariableData variable[count]<optimize=false>;
        break;
}