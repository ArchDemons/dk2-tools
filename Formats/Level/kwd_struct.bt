/* -*- Mode: C; -*- */
//--------------------------------------
//--- 010 Editor v6.0.3 Binary Template
//
// File:        kwd_struct.bt
// Author:      ufdada
// Revision:    1.0
// Purpose:     KWD File
//--------------------------------------
LittleEndian();
#include "timestamp.bt";
#include "../util_struc.bt";
#include "resource.bt";

#include "creatures_struct.bt";
#include "creature_spells_struct.bt";
#include "doors_struct.bt";
#include "effects_struct.bt";
#include "effect_elements_struct.bt";
#include "keeper_spells_struct.bt";
#include "map_struct.bt";
#include "objects_struct.bt";
#include "player_struct.bt";
#include "rooms_struct.bt";
#include "shots_struct.bt";
#include "terrains_struct.bt";
#include "things_struct.bt";
#include "traps_struct.bt";
#include "variables_struct.bt";

enum MapType {
    GLOBALS = 0, // As in overrides the regular ones
    MAP = 100,
    TERRAIN = 110,
    ROOMS = 120,
    TRAPS = 130,
    DOORS = 140,
    KEEPER_SPELLS = 150,
    CREATURE_SPELLS = 160,
    CREATURES = 170,
    PLAYERS = 180,
    THINGS = 190,
    TRIGGERS = 210,
    LEVEL = 220,
    VARIABLES = 230,
    OBJECTS = 240,
    EFFECT_ELEMENTS = 250,
    SHOTS = 260,
    EFFECTS = 270
};

struct Header {
    MapType signature;
    uint byteSize; // bytes in real size => 4
    int fileSize;
    int checkOne;
    int headerEndOffSet;
    switch (header.signature) {
        case MAP:
            struct {
                uint width;
                uint height;
            } mapInfo;
            break;
        case LEVEL:
            struct {
                ushort itemCount;
                ushort height;
                ubyte unk1[4];
                timeStamp created;
                timeStamp modified;
            } levelInfo;
            break;
        default:
            struct {
                uint itemCount;
                uint unk2;
                timeStamp created;
                timeStamp modified;
            } general;
    }
    int checkTwo;
    int contentSize; // filesize without header
} header;

local string corruptFileMessage = "Corrupt file. %s check failed. Template stopped.";

// Check file
if (header.checkOne != header.signature + 1) {
    Warning( corruptFileMessage, "First" );
    Printf( corruptFileMessage, "First" );
    return -1;
} else if (header.checkTwo != header.signature + 2 && header.checkTwo != header.signature + 3 ) {
    Warning( corruptFileMessage, "Second" );
    Printf( corruptFileMessage, "Second" );
    return -1;
}

local int count = header.general.itemCount;

switch (header.signature) {
    case CREATURE_SPELLS:
        CreatureSpellData spells[count]<optimize=false>;
        break;
    case CREATURES:
        CreatureData creature[count]<optimize=false>;
        break;
    case DOORS:
        DoorData doors[count]<optimize=false>;
        break;
    case EFFECT_ELEMENTS:
        EffectElementData effectElement[count]<optimize=false>;
        break;
    case EFFECTS:
        EffectData effect[count]<optimize=false>;
        break;
    case KEEPER_SPELLS:
        KeeperSpellData keeperSpells[count]<optimize=false>;
        break;
    case MAP:
        MapData map;
        break;
    case OBJECTS:
        ObjectData object[count]<optimize=false>;
        break;
    case PLAYERS:
        PlayerData player[count]<optimize=false>;
        break;
    case ROOMS:
        RoomData room[count]<optimize=false>;
        break;
    case SHOTS:
        ShotData shot[count]<optimize=false>;
        break;
    case TERRAIN:
        TerrainData terrain[count]<optimize=false>;
        break;
    case THINGS:
        ThingData thing[count]<optimize=false>;
        break;
    case TRAPS:
        TrapData trap[count]<optimize=false>;
        break;
    case VARIABLES:
        VariableData variable[count]<optimize=false>;
        break;
}